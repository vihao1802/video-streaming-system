services:
  client:
    container_name: client
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    env_file:
      - ./client/.env
    networks:
      - app-network

  server:
    container_name: server
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./server:/app
    env_file:
      - ./server/.env
    depends_on:
      - postgres
      - redis
      - minio
      - message-queue
    networks:
      - app-network

  transcoder: # aka consumer
    container_name: transcoder
    build:
      context: ./transcoder
      dockerfile: Dockerfile
    restart: on-failure:5
    volumes:
      - ./transcoder:/app
    env_file:
      - ./transcoder/.env
    depends_on:
      - redis
      - minio
      - message-queue
    networks:
      - app-network

  message-queue:
    image: "bitnami/kafka:latest" # Kafka version 3.5.0
    container_name: message-queue
    ports:
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@message-queue:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://message-queue:9092,CONTROLLER://message-queue:9093,EXTERNAL://message-queue:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://message-queue:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - app-network

  message-queue-ui:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: message-queue-ui
    restart: on-failure:3
    ports:
      - "8081:8080"
    environment:
      - KAFKA_BROKERS=message-queue:9092
    depends_on:
      - message-queue
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine # PostgreSQL version 15
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=video_streaming
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:7-alpine # Redis version 7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  minio:
    image: quay.io/minio/minio # MinIO version 2024-06-19T16:45:00Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=12345678
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network

volumes:
  postgres_data:
  minio_data:

networks:
  app-network:
    driver: bridge
